library(OneGene)
devtools::build()
devtools::install()
devtools::install_local('../OneGene_0.0.0.tar.gz')
ggsci::pal_aaas()(10)
devtools::install()
detach("package:OneGene", unload = TRUE)
devtools::install()
devtools::build()
#' @param values
#' @param title
#' @param x.title
#' @param y.title
#' @param color
#'
#' @return
#' @export
#'
#' @examples
plot_boxblot <- function(dataset,group,values,
title="",
x.title="",y.title="",
color = c("#3B4992FF", "#EE0000FF", "#008B45FF", "#631879FF", "#008280FF", "#BB0021FF",
"#5F559BFF", "#A20056FF", "#808180FF", "#1B1919FF")) {
color <- color
ggplot(dataset,aes_string(reorder(group,values),values,color = group))+
geom_boxplot()+
theme(panel.background = element_blank()) +
theme(axis.line = element_line(colour = "black")) +
theme(axis.title.x = element_blank()) +
theme(legend.position = "NA") +
labs(x = x.title, y = y.title,title = title) +
theme(axis.title.y = element_text(size = 15)) +
theme(axis.text.x = element_text(size = 15, angle = 45, vjust = 1,
hjust = 1))+
stat_compare_means()
}
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
as.name(org.Hs.eg.db)
as.name('org.Hs.eg.db')
devtools::install()
devtools::build()
usethis::use_git()
usethis::use_github()
usethis::use_github()
usethis::use_github()
usethis::use_git()
usethis::use_github()
usethis::use_github()
gh_token_help()
usethis::use_github()
devtools::install_github('Aggrephagy/OneGene')
usethis::use_github()
usethis::use_git()
# Github token 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
library(OneGene)
project_data <- XenaScan(pattern = project)
project_data <- UCSCXenaTools::XenaScan(pattern = project)
project_data <- UCSCXenaTools::XenaScan(pattern = 'STAD')
View(project_data)
View(project_data)
# 只要GDC
cohort <- str_extract(project_data$XenaDatasets,
pattern = "MuTect2*") %>%
na.omit() %>% unique()
# 只要GDC
library(dplyr)
cohort <- str_extract(project_data$XenaDatasets,
pattern = "MuTect2*") %>%
na.omit() %>% unique()
# 只要GDC
library(tidyverse)
cohort <- str_extract(project_data$XenaDatasets,
pattern = "MuTect2*") %>%
na.omit() %>% unique()
cohort <- str_extract(project_data$Label,
pattern = "MuTect2*") %>%
na.omit() %>% unique()
cohort <- project_data$XenaDatasets[str_detect(project_data$Label,
pattern = "MuTect2*"),] %>%
na.omit() %>% unique()
str_detect(project_data$Label,
pattern = "MuTect2*")
index <- str_detect(project_data$Label, pattern = "MuTect2*")
cohort <- project_data$XenaDatasets[index,] %>%
na.omit() %>% unique()
cohort <- project_data[index,] %>%
na.omit() %>% unique()
table(index)
cohort <- project_data[index,]
View(cohort)
cohort <- project_data[index,]$XenaCohorts
cohort <- project_data[index,]$XenaCohorts %>% unique()
DataSubtype <- project_data[index,]$DataSubtype
# 下载表达矩阵
dataset <- project_data %>%
XenaGenerate(subset = XenaCohorts == cohort &
DataSubtype == DataSubtype)
library(UCSCXenaTools)
# 下载表达矩阵
dataset <- project_data %>%
XenaGenerate(subset = XenaCohorts == cohort &
DataSubtype == DataSubtype)
message("=> Starting download! \n")
exp <- dataset %>%
XenaFilter(filterDatasets = dataset@datasets[str_detect(dataset@datasets,data_type)]) %>% # 筛选数据集
XenaQuery() %>% # 查询
XenaDownload() %>% # 下载
XenaPrepare() # 整理
?XenaFilter
dataset@datasets
cohort
DataSubtype
dataset@datasets
exp <- dataset %>%
XenaFilter(filterDatasets = dataset@datasets[str_detect(dataset@datasets,'mutect2')]) %>% # 筛选数据集
XenaQuery() %>% # 查询
XenaDownload() %>% # 下载
XenaPrepare() # 整理
View(exp)
maf <- exp
colnames(maf) =c( "Tumor_Sample_Barcode", "Hugo_Symbol",
"Chromosome", "Start_Position",
"End_Position", "Reference_Allele", "Tumor_Seq_Allele2",
"HGVSp_Short" , 'effect' ,"Consequence",
"vaf" )
View(maf)
maf$Entrez_Gene_Id =1
maf$Center ='ucsc'
maf$NCBI_Build ='GRCh38'
maf$NCBI_Build ='GRCh38'
maf$Strand ='+'
maf$Variant_Classification = maf$effect
tail(sort(table(maf$Variant_Classification )))
maf$Tumor_Seq_Allele1 = maf$Reference_Allele
maf$Variant_Type = ifelse(
maf$Reference_Allele %in% c('A','C','T','G') & maf$Tumor_Seq_Allele2 %in% c('A','C','T','G'),
'SNP','INDEL'
)
table(maf$Variant_Type )
library(maftools)
# 取名
maf.data = read.maf(maf = maf,
vc_nonSyn=names(tail(sort(table(maf$Variant_Classification )))))
# 设置指定基因
oncoplot(maf = maf.data,genes = c('NFE2L2','KEAP1','CUL3'))
library(OneGene)
library(tidyverse)
library(UCSCXenaTools)
project_data <- UCSCXenaTools::XenaScan(pattern = 'STAD')
index <- str_detect(project_data$Label, pattern = "MuTect2*")
table(index)
cohort <- project_data[index,]$XenaCohorts %>% unique()
cohort
DataSubtype <- project_data[index,]$DataSubtype
DataSubtype
# 下载表达矩阵
dataset <- project_data %>%
XenaGenerate(subset = XenaCohorts == cohort &
DataSubtype == DataSubtype)
message("=> Starting download! \n")
maf <- dataset %>%
XenaFilter(filterDatasets = dataset@datasets[str_detect(dataset@datasets,'mutect2')]) %>% # 筛选数据集
XenaQuery() %>% # 查询
XenaDownload() %>% # 下载
XenaPrepare() # 整理
colnames(maf) =c( "Tumor_Sample_Barcode", "Hugo_Symbol",
"Chromosome", "Start_Position",
"End_Position", "Reference_Allele", "Tumor_Seq_Allele2",
"HGVSp_Short" , 'effect' ,"Consequence",
"vaf" )
maf$Entrez_Gene_Id =1
maf$Center ='ucsc'
maf$NCBI_Build ='GRCh38'
maf$NCBI_Build ='GRCh38'
maf$Variant_Classification = maf$effect
maf$Strand ='+'
tail(sort(table(maf$Variant_Classification )))
maf$Tumor_Seq_Allele1 = maf$Reference_Allele
maf$Variant_Type = ifelse(
maf$Reference_Allele %in% c('A','C','T','G') & maf$Tumor_Seq_Allele2 %in% c('A','C','T','G'),
'SNP','INDEL'
)
table(maf$Variant_Type )
View(maf)
pattern <- 'STAD'
download_maf <- function(project="") {
library(tidyverse)
library(UCSCXenaTools)
# 创建输出文件夹
if (!dir.exists("output_xena")) {
dir.create("output_xena")
}
project_data <- UCSCXenaTools::XenaScan(pattern = project)
index <- str_detect(project_data$Label, pattern = "MuTect2*")
table(index)
cohort <- project_data[index,]$XenaCohorts %>% unique()
cohort
DataSubtype <- project_data[index,]$DataSubtype
DataSubtype
# Project种类
message(knitr::kable(data.frame(cancer = c('ACC','BLCA','BRCA','CESC','CHOL','COAD',
'COADREAD', 'DLBC','ESCA','FPPP','GBM', 'GBMLGG',
'HNSC','KICH','KIPAN','KIRC',
'KIRP','LAML','LGG','LIHC',
'LUAD', 'LUSC','MESO', 'OV',
'PAAD','PCPG','PRAD','READ', 'SARC',
'SKCM','STAD', 'STES',
'TGCT','THCA','THYM',
'UCEC', 'UCS', 'UVM'))))
# 下载表达矩阵
dataset <- project_data %>%
XenaGenerate(subset = XenaCohorts == cohort &
DataSubtype == DataSubtype)
message("=> Starting download! \n")
maf <- dataset %>%
XenaFilter(filterDatasets = dataset@datasets[str_detect(dataset@datasets,'mutect2')]) %>%
XenaQuery() %>%
XenaDownload() %>%
XenaPrepare()
# 预处理开始
message("=> Start preprocessing! \n")
colnames(maf) <- c("Tumor_Sample_Barcode", "Hugo_Symbol",
"Chromosome", "Start_Position",
"End_Position", "Reference_Allele", "Tumor_Seq_Allele2",
"HGVSp_Short" , 'effect' ,"Consequence",
"vaf" )
maf$Entrez_Gene_Id <- 1
maf$Center <- 'ucsc'
maf$NCBI_Build <- 'GRCh38'
maf$Strand <- '+'
maf$Variant_Classification <- maf$effect
maf$Tumor_Seq_Allele1 <- maf$Reference_Allele
maf$Variant_Type <- ifelse(
maf$Reference_Allele %in% c('A','C','T','G') & maf$Tumor_Seq_Allele2 %in% c('A','C','T','G'),
'SNP','INDEL'
)
data.table::fwrite(maf,file = paste0("./output_xena/",project,'.txt'))
return(maf)
}
download_maf <- function(project="eg:STAD") {
library(tidyverse)
library(UCSCXenaTools)
# 创建输出文件夹
if (!dir.exists("output_xena")) {
dir.create("output_xena")
}
project_data <- UCSCXenaTools::XenaScan(pattern = project)
index <- str_detect(project_data$Label, pattern = "MuTect2*")
table(index)
cohort <- project_data[index,]$XenaCohorts %>% unique()
cohort
DataSubtype <- project_data[index,]$DataSubtype
DataSubtype
# Project种类
message(knitr::kable(data.frame(cancer = c('ACC','BLCA','BRCA','CESC','CHOL','COAD',
'COADREAD', 'DLBC','ESCA','FPPP','GBM', 'GBMLGG',
'HNSC','KICH','KIPAN','KIRC',
'KIRP','LAML','LGG','LIHC',
'LUAD', 'LUSC','MESO', 'OV',
'PAAD','PCPG','PRAD','READ', 'SARC',
'SKCM','STAD', 'STES',
'TGCT','THCA','THYM',
'UCEC', 'UCS', 'UVM'))))
# 下载表达矩阵
dataset <- project_data %>%
XenaGenerate(subset = XenaCohorts == cohort &
DataSubtype == DataSubtype)
message("=> Starting download! \n")
maf <- dataset %>%
XenaFilter(filterDatasets = dataset@datasets[str_detect(dataset@datasets,'mutect2')]) %>%
XenaQuery() %>%
XenaDownload() %>%
XenaPrepare()
# 预处理开始
message("=> Start preprocessing! \n")
colnames(maf) <- c("Tumor_Sample_Barcode", "Hugo_Symbol",
"Chromosome", "Start_Position",
"End_Position", "Reference_Allele", "Tumor_Seq_Allele2",
"HGVSp_Short" , 'effect' ,"Consequence",
"vaf" )
maf$Entrez_Gene_Id <- 1
maf$Center <- 'ucsc'
maf$NCBI_Build <- 'GRCh38'
maf$Strand <- '+'
maf$Variant_Classification <- maf$effect
maf$Tumor_Seq_Allele1 <- maf$Reference_Allele
maf$Variant_Type <- ifelse(
maf$Reference_Allele %in% c('A','C','T','G') & maf$Tumor_Seq_Allele2 %in% c('A','C','T','G'),
'SNP','INDEL'
)
data.table::fwrite(maf,file = paste0("./output_xena/",project,'.txt'))
return(maf)
}
download_maf(project = "STA")
download_maf(project = "STAD")
download_maf <- function(project="eg:STAD") {
library(tidyverse)
library(UCSCXenaTools)
# 创建输出文件夹
if (!dir.exists("output_xena")) {
dir.create("output_xena")
}
project_data <- UCSCXenaTools::XenaScan(pattern = project)
index <- str_detect(project_data$Label, pattern = "MuTect2*")
table(index)
cohort <- project_data[index,]$XenaCohorts %>% unique()
cohort
DataSubtype <- project_data[index,]$DataSubtype
DataSubtype
# Project种类
message(knitr::kable(data.frame(cancer = c('ACC','BLCA','BRCA','CESC','CHOL','COAD',
'COADREAD', 'DLBC','ESCA','FPPP','GBM', 'GBMLGG',
'HNSC','KICH','KIPAN','KIRC',
'KIRP','LAML','LGG','LIHC',
'LUAD', 'LUSC','MESO', 'OV',
'PAAD','PCPG','PRAD','READ', 'SARC',
'SKCM','STAD', 'STES',
'TGCT','THCA','THYM',
'UCEC', 'UCS', 'UVM'))))
# 下载表达矩阵
dataset <- project_data %>%
XenaGenerate(subset = XenaCohorts == cohort &
DataSubtype == DataSubtype)
message("=> Starting download! \n")
maf <- dataset %>%
XenaFilter(filterDatasets = dataset@datasets[str_detect(dataset@datasets,'mutect2')]) %>%
XenaQuery() %>%
XenaDownload() %>%
XenaPrepare()
# 预处理开始
message("=> Start preprocessing! \n")
colnames(maf) <- c("Tumor_Sample_Barcode", "Hugo_Symbol",
"Chromosome", "Start_Position",
"End_Position", "Reference_Allele", "Tumor_Seq_Allele2",
"HGVSp_Short" , 'effect' ,"Consequence",
"vaf" )
maf$Entrez_Gene_Id <- 1
maf$Center <- 'ucsc'
maf$NCBI_Build <- 'GRCh38'
maf$Strand <- '+'
maf$Variant_Classification <- maf$effect
maf$Tumor_Seq_Allele1 <- maf$Reference_Allele
maf$Variant_Type <- ifelse(
maf$Reference_Allele %in% c('A','C','T','G') & maf$Tumor_Seq_Allele2 %in% c('A','C','T','G'),
'SNP','INDEL'
)
data.table::fwrite(maf,file = paste0("./output_xena/",project,'_maf.txt'))
return(maf)
}
download_maf(project = "STAD")
download_maf <- function(project="eg:STAD") {
library(tidyverse)
library(UCSCXenaTools)
# 创建输出文件夹
if (!dir.exists("output_xena")) {
dir.create("output_xena")
}
project_data <- UCSCXenaTools::XenaScan(pattern = project)
index <- str_detect(project_data$Label, pattern = "MuTect2*")
table(index)
cohort <- project_data[index,]$XenaCohorts %>% unique()
cohort
DataSubtype <- project_data[index,]$DataSubtype
DataSubtype
# Project种类
message(knitr::kable(data.frame(cancer = c('ACC','BLCA','BRCA','CESC','CHOL','COAD',
'COADREAD', 'DLBC','ESCA','FPPP','GBM', 'GBMLGG',
'HNSC','KICH','KIPAN','KIRC',
'KIRP','LAML','LGG','LIHC',
'LUAD', 'LUSC','MESO', 'OV',
'PAAD','PCPG','PRAD','READ', 'SARC',
'SKCM','STAD', 'STES',
'TGCT','THCA','THYM',
'UCEC', 'UCS', 'UVM'))))
# 下载表达矩阵
dataset <- project_data %>%
XenaGenerate(subset = XenaCohorts == cohort &
DataSubtype == DataSubtype)
message("=> Starting download! \n")
maf <- dataset %>%
XenaFilter(filterDatasets = dataset@datasets[str_detect(dataset@datasets,'mutect2')]) %>%
XenaQuery() %>%
XenaDownload() %>%
XenaPrepare()
# 预处理开始
message("=> Start preprocessing! \n")
colnames(maf) <- c("Tumor_Sample_Barcode", "Hugo_Symbol",
"Chromosome", "Start_Position",
"End_Position", "Reference_Allele", "Tumor_Seq_Allele2",
"HGVSp_Short" , 'effect' ,"Consequence",
"vaf" )
maf$Entrez_Gene_Id <- 1
maf$Center <- 'ucsc'
maf$NCBI_Build <- 'GRCh38'
maf$Strand <- '+'
maf$Variant_Classification <- maf$effect
maf$Tumor_Seq_Allele1 <- maf$Reference_Allele
maf$Variant_Type <- ifelse(
maf$Reference_Allele %in% c('A','C','T','G') & maf$Tumor_Seq_Allele2 %in% c('A','C','T','G'),
'SNP','INDEL'
)
data.table::fwrite(maf,file = paste0("./output_xena/",project,'_maf.txt'))
return(maf)
# 成功
message("=> Success! \n")
}
?download_maf()
download_maf(project = 'LUAD')
download_maf <- function(project="eg:STAD") {
library(tidyverse)
library(UCSCXenaTools)
# 创建输出文件夹
if (!dir.exists("output_xena")) {
dir.create("output_xena")
}
project_data <- UCSCXenaTools::XenaScan(pattern = project)
index <- str_detect(project_data$Label, pattern = "MuTect2*")
table(index)
cohort <- project_data[index,]$XenaCohorts %>% unique()
cohort
DataSubtype <- project_data[index,]$DataSubtype
DataSubtype
# Project种类
message(knitr::kable(data.frame(cancer = c('ACC','BLCA','BRCA','CESC','CHOL','COAD',
'COADREAD', 'DLBC','ESCA','FPPP','GBM', 'GBMLGG',
'HNSC','KICH','KIPAN','KIRC',
'KIRP','LAML','LGG','LIHC',
'LUAD', 'LUSC','MESO', 'OV',
'PAAD','PCPG','PRAD','READ', 'SARC',
'SKCM','STAD', 'STES',
'TGCT','THCA','THYM',
'UCEC', 'UCS', 'UVM'))))
# 下载表达矩阵
dataset <- project_data %>%
XenaGenerate(subset = XenaCohorts == cohort &
DataSubtype == DataSubtype)
message("=> Starting download! \n")
maf <- dataset %>%
XenaFilter(filterDatasets = dataset@datasets[str_detect(dataset@datasets,'mutect2')]) %>%
XenaQuery() %>%
XenaDownload() %>%
XenaPrepare()
# 预处理开始
message("=> Start preprocessing! \n")
colnames(maf) <- c("Tumor_Sample_Barcode", "Hugo_Symbol",
"Chromosome", "Start_Position",
"End_Position", "Reference_Allele", "Tumor_Seq_Allele2",
"HGVSp_Short" , 'effect' ,"Consequence",
"vaf" )
maf$Entrez_Gene_Id <- 1
maf$Center <- 'ucsc'
maf$NCBI_Build <- 'GRCh38'
maf$Strand <- '+'
maf$Variant_Classification <- maf$effect
maf$Tumor_Seq_Allele1 <- maf$Reference_Allele
maf$Variant_Type <- ifelse(
maf$Reference_Allele %in% c('A','C','T','G') & maf$Tumor_Seq_Allele2 %in% c('A','C','T','G'),
'SNP','INDEL'
)
data.table::fwrite(maf,file = paste0("./output_xena/",project,'_maf.txt'))
# 成功
message("=> Success! \n")
return(maf)
}
download_maf(project = 'LUAD')
res <- download_maf(project = 'LUAD')
devtools::install_github('Aggrephagy/OneGene')
library(OneGene)
usethis::use_github()
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github()
gh_token_help()
usethis::gh_token_help()
usethis::use_github()
usethis::use_github()
usethis::gh_token_help()
git_default_branch()
library(usethis)
git_default_branch()
usethis::use_github()
usethis::use_github()
usethis::use_github()
BiocManager::install(c('motifmatchr', 'chromVAR'))
devtools::install_github("GreenleafLab/ArchR")
devtools::install_github("GreenleafLab/ArchR")
library(ArchR)
ArchR::installExtraPackages()
addArchRGenome("hg38")
addArchRGenome("hg38")
devtools::install()
usethis::use_github()
devtools::build()
devtools::install()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install_local('../OneGene_0.0.1.tar.gz')
install.packages("~/Xiapeng_files/OneGene_0.0.1.tar.gz", repos = NULL, type = "source")
library(OneGene)
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
usethis::edit_r_environ()
usethis::edit_r_environ()
usethis::edit_r_environ()
