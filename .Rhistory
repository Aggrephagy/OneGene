cohort
DataSubtype <- project_data[index,]$DataSubtype
DataSubtype
# 下载表达矩阵
dataset <- project_data %>%
XenaGenerate(subset = XenaCohorts == cohort &
DataSubtype == DataSubtype)
message("=> Starting download! \n")
maf <- dataset %>%
XenaFilter(filterDatasets = dataset@datasets[str_detect(dataset@datasets,'mutect2')]) %>% # 筛选数据集
XenaQuery() %>% # 查询
XenaDownload() %>% # 下载
XenaPrepare() # 整理
colnames(maf) =c( "Tumor_Sample_Barcode", "Hugo_Symbol",
"Chromosome", "Start_Position",
"End_Position", "Reference_Allele", "Tumor_Seq_Allele2",
"HGVSp_Short" , 'effect' ,"Consequence",
"vaf" )
maf$Entrez_Gene_Id =1
maf$Center ='ucsc'
maf$NCBI_Build ='GRCh38'
maf$NCBI_Build ='GRCh38'
maf$Variant_Classification = maf$effect
maf$Strand ='+'
tail(sort(table(maf$Variant_Classification )))
maf$Tumor_Seq_Allele1 = maf$Reference_Allele
maf$Variant_Type = ifelse(
maf$Reference_Allele %in% c('A','C','T','G') & maf$Tumor_Seq_Allele2 %in% c('A','C','T','G'),
'SNP','INDEL'
)
table(maf$Variant_Type )
View(maf)
pattern <- 'STAD'
download_maf <- function(project="") {
library(tidyverse)
library(UCSCXenaTools)
# 创建输出文件夹
if (!dir.exists("output_xena")) {
dir.create("output_xena")
}
project_data <- UCSCXenaTools::XenaScan(pattern = project)
index <- str_detect(project_data$Label, pattern = "MuTect2*")
table(index)
cohort <- project_data[index,]$XenaCohorts %>% unique()
cohort
DataSubtype <- project_data[index,]$DataSubtype
DataSubtype
# Project种类
message(knitr::kable(data.frame(cancer = c('ACC','BLCA','BRCA','CESC','CHOL','COAD',
'COADREAD', 'DLBC','ESCA','FPPP','GBM', 'GBMLGG',
'HNSC','KICH','KIPAN','KIRC',
'KIRP','LAML','LGG','LIHC',
'LUAD', 'LUSC','MESO', 'OV',
'PAAD','PCPG','PRAD','READ', 'SARC',
'SKCM','STAD', 'STES',
'TGCT','THCA','THYM',
'UCEC', 'UCS', 'UVM'))))
# 下载表达矩阵
dataset <- project_data %>%
XenaGenerate(subset = XenaCohorts == cohort &
DataSubtype == DataSubtype)
message("=> Starting download! \n")
maf <- dataset %>%
XenaFilter(filterDatasets = dataset@datasets[str_detect(dataset@datasets,'mutect2')]) %>%
XenaQuery() %>%
XenaDownload() %>%
XenaPrepare()
# 预处理开始
message("=> Start preprocessing! \n")
colnames(maf) <- c("Tumor_Sample_Barcode", "Hugo_Symbol",
"Chromosome", "Start_Position",
"End_Position", "Reference_Allele", "Tumor_Seq_Allele2",
"HGVSp_Short" , 'effect' ,"Consequence",
"vaf" )
maf$Entrez_Gene_Id <- 1
maf$Center <- 'ucsc'
maf$NCBI_Build <- 'GRCh38'
maf$Strand <- '+'
maf$Variant_Classification <- maf$effect
maf$Tumor_Seq_Allele1 <- maf$Reference_Allele
maf$Variant_Type <- ifelse(
maf$Reference_Allele %in% c('A','C','T','G') & maf$Tumor_Seq_Allele2 %in% c('A','C','T','G'),
'SNP','INDEL'
)
data.table::fwrite(maf,file = paste0("./output_xena/",project,'.txt'))
return(maf)
}
download_maf <- function(project="eg:STAD") {
library(tidyverse)
library(UCSCXenaTools)
# 创建输出文件夹
if (!dir.exists("output_xena")) {
dir.create("output_xena")
}
project_data <- UCSCXenaTools::XenaScan(pattern = project)
index <- str_detect(project_data$Label, pattern = "MuTect2*")
table(index)
cohort <- project_data[index,]$XenaCohorts %>% unique()
cohort
DataSubtype <- project_data[index,]$DataSubtype
DataSubtype
# Project种类
message(knitr::kable(data.frame(cancer = c('ACC','BLCA','BRCA','CESC','CHOL','COAD',
'COADREAD', 'DLBC','ESCA','FPPP','GBM', 'GBMLGG',
'HNSC','KICH','KIPAN','KIRC',
'KIRP','LAML','LGG','LIHC',
'LUAD', 'LUSC','MESO', 'OV',
'PAAD','PCPG','PRAD','READ', 'SARC',
'SKCM','STAD', 'STES',
'TGCT','THCA','THYM',
'UCEC', 'UCS', 'UVM'))))
# 下载表达矩阵
dataset <- project_data %>%
XenaGenerate(subset = XenaCohorts == cohort &
DataSubtype == DataSubtype)
message("=> Starting download! \n")
maf <- dataset %>%
XenaFilter(filterDatasets = dataset@datasets[str_detect(dataset@datasets,'mutect2')]) %>%
XenaQuery() %>%
XenaDownload() %>%
XenaPrepare()
# 预处理开始
message("=> Start preprocessing! \n")
colnames(maf) <- c("Tumor_Sample_Barcode", "Hugo_Symbol",
"Chromosome", "Start_Position",
"End_Position", "Reference_Allele", "Tumor_Seq_Allele2",
"HGVSp_Short" , 'effect' ,"Consequence",
"vaf" )
maf$Entrez_Gene_Id <- 1
maf$Center <- 'ucsc'
maf$NCBI_Build <- 'GRCh38'
maf$Strand <- '+'
maf$Variant_Classification <- maf$effect
maf$Tumor_Seq_Allele1 <- maf$Reference_Allele
maf$Variant_Type <- ifelse(
maf$Reference_Allele %in% c('A','C','T','G') & maf$Tumor_Seq_Allele2 %in% c('A','C','T','G'),
'SNP','INDEL'
)
data.table::fwrite(maf,file = paste0("./output_xena/",project,'.txt'))
return(maf)
}
download_maf(project = "STA")
download_maf(project = "STAD")
download_maf <- function(project="eg:STAD") {
library(tidyverse)
library(UCSCXenaTools)
# 创建输出文件夹
if (!dir.exists("output_xena")) {
dir.create("output_xena")
}
project_data <- UCSCXenaTools::XenaScan(pattern = project)
index <- str_detect(project_data$Label, pattern = "MuTect2*")
table(index)
cohort <- project_data[index,]$XenaCohorts %>% unique()
cohort
DataSubtype <- project_data[index,]$DataSubtype
DataSubtype
# Project种类
message(knitr::kable(data.frame(cancer = c('ACC','BLCA','BRCA','CESC','CHOL','COAD',
'COADREAD', 'DLBC','ESCA','FPPP','GBM', 'GBMLGG',
'HNSC','KICH','KIPAN','KIRC',
'KIRP','LAML','LGG','LIHC',
'LUAD', 'LUSC','MESO', 'OV',
'PAAD','PCPG','PRAD','READ', 'SARC',
'SKCM','STAD', 'STES',
'TGCT','THCA','THYM',
'UCEC', 'UCS', 'UVM'))))
# 下载表达矩阵
dataset <- project_data %>%
XenaGenerate(subset = XenaCohorts == cohort &
DataSubtype == DataSubtype)
message("=> Starting download! \n")
maf <- dataset %>%
XenaFilter(filterDatasets = dataset@datasets[str_detect(dataset@datasets,'mutect2')]) %>%
XenaQuery() %>%
XenaDownload() %>%
XenaPrepare()
# 预处理开始
message("=> Start preprocessing! \n")
colnames(maf) <- c("Tumor_Sample_Barcode", "Hugo_Symbol",
"Chromosome", "Start_Position",
"End_Position", "Reference_Allele", "Tumor_Seq_Allele2",
"HGVSp_Short" , 'effect' ,"Consequence",
"vaf" )
maf$Entrez_Gene_Id <- 1
maf$Center <- 'ucsc'
maf$NCBI_Build <- 'GRCh38'
maf$Strand <- '+'
maf$Variant_Classification <- maf$effect
maf$Tumor_Seq_Allele1 <- maf$Reference_Allele
maf$Variant_Type <- ifelse(
maf$Reference_Allele %in% c('A','C','T','G') & maf$Tumor_Seq_Allele2 %in% c('A','C','T','G'),
'SNP','INDEL'
)
data.table::fwrite(maf,file = paste0("./output_xena/",project,'_maf.txt'))
return(maf)
}
download_maf(project = "STAD")
download_maf <- function(project="eg:STAD") {
library(tidyverse)
library(UCSCXenaTools)
# 创建输出文件夹
if (!dir.exists("output_xena")) {
dir.create("output_xena")
}
project_data <- UCSCXenaTools::XenaScan(pattern = project)
index <- str_detect(project_data$Label, pattern = "MuTect2*")
table(index)
cohort <- project_data[index,]$XenaCohorts %>% unique()
cohort
DataSubtype <- project_data[index,]$DataSubtype
DataSubtype
# Project种类
message(knitr::kable(data.frame(cancer = c('ACC','BLCA','BRCA','CESC','CHOL','COAD',
'COADREAD', 'DLBC','ESCA','FPPP','GBM', 'GBMLGG',
'HNSC','KICH','KIPAN','KIRC',
'KIRP','LAML','LGG','LIHC',
'LUAD', 'LUSC','MESO', 'OV',
'PAAD','PCPG','PRAD','READ', 'SARC',
'SKCM','STAD', 'STES',
'TGCT','THCA','THYM',
'UCEC', 'UCS', 'UVM'))))
# 下载表达矩阵
dataset <- project_data %>%
XenaGenerate(subset = XenaCohorts == cohort &
DataSubtype == DataSubtype)
message("=> Starting download! \n")
maf <- dataset %>%
XenaFilter(filterDatasets = dataset@datasets[str_detect(dataset@datasets,'mutect2')]) %>%
XenaQuery() %>%
XenaDownload() %>%
XenaPrepare()
# 预处理开始
message("=> Start preprocessing! \n")
colnames(maf) <- c("Tumor_Sample_Barcode", "Hugo_Symbol",
"Chromosome", "Start_Position",
"End_Position", "Reference_Allele", "Tumor_Seq_Allele2",
"HGVSp_Short" , 'effect' ,"Consequence",
"vaf" )
maf$Entrez_Gene_Id <- 1
maf$Center <- 'ucsc'
maf$NCBI_Build <- 'GRCh38'
maf$Strand <- '+'
maf$Variant_Classification <- maf$effect
maf$Tumor_Seq_Allele1 <- maf$Reference_Allele
maf$Variant_Type <- ifelse(
maf$Reference_Allele %in% c('A','C','T','G') & maf$Tumor_Seq_Allele2 %in% c('A','C','T','G'),
'SNP','INDEL'
)
data.table::fwrite(maf,file = paste0("./output_xena/",project,'_maf.txt'))
return(maf)
# 成功
message("=> Success! \n")
}
?download_maf()
download_maf(project = 'LUAD')
download_maf <- function(project="eg:STAD") {
library(tidyverse)
library(UCSCXenaTools)
# 创建输出文件夹
if (!dir.exists("output_xena")) {
dir.create("output_xena")
}
project_data <- UCSCXenaTools::XenaScan(pattern = project)
index <- str_detect(project_data$Label, pattern = "MuTect2*")
table(index)
cohort <- project_data[index,]$XenaCohorts %>% unique()
cohort
DataSubtype <- project_data[index,]$DataSubtype
DataSubtype
# Project种类
message(knitr::kable(data.frame(cancer = c('ACC','BLCA','BRCA','CESC','CHOL','COAD',
'COADREAD', 'DLBC','ESCA','FPPP','GBM', 'GBMLGG',
'HNSC','KICH','KIPAN','KIRC',
'KIRP','LAML','LGG','LIHC',
'LUAD', 'LUSC','MESO', 'OV',
'PAAD','PCPG','PRAD','READ', 'SARC',
'SKCM','STAD', 'STES',
'TGCT','THCA','THYM',
'UCEC', 'UCS', 'UVM'))))
# 下载表达矩阵
dataset <- project_data %>%
XenaGenerate(subset = XenaCohorts == cohort &
DataSubtype == DataSubtype)
message("=> Starting download! \n")
maf <- dataset %>%
XenaFilter(filterDatasets = dataset@datasets[str_detect(dataset@datasets,'mutect2')]) %>%
XenaQuery() %>%
XenaDownload() %>%
XenaPrepare()
# 预处理开始
message("=> Start preprocessing! \n")
colnames(maf) <- c("Tumor_Sample_Barcode", "Hugo_Symbol",
"Chromosome", "Start_Position",
"End_Position", "Reference_Allele", "Tumor_Seq_Allele2",
"HGVSp_Short" , 'effect' ,"Consequence",
"vaf" )
maf$Entrez_Gene_Id <- 1
maf$Center <- 'ucsc'
maf$NCBI_Build <- 'GRCh38'
maf$Strand <- '+'
maf$Variant_Classification <- maf$effect
maf$Tumor_Seq_Allele1 <- maf$Reference_Allele
maf$Variant_Type <- ifelse(
maf$Reference_Allele %in% c('A','C','T','G') & maf$Tumor_Seq_Allele2 %in% c('A','C','T','G'),
'SNP','INDEL'
)
data.table::fwrite(maf,file = paste0("./output_xena/",project,'_maf.txt'))
# 成功
message("=> Success! \n")
return(maf)
}
download_maf(project = 'LUAD')
res <- download_maf(project = 'LUAD')
devtools::install_github('Aggrephagy/OneGene')
library(OneGene)
usethis::use_github()
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github()
gh_token_help()
usethis::gh_token_help()
usethis::use_github()
usethis::use_github()
usethis::gh_token_help()
git_default_branch()
library(usethis)
git_default_branch()
usethis::use_github()
usethis::use_github()
usethis::use_github()
BiocManager::install(c('motifmatchr', 'chromVAR'))
devtools::install_github("GreenleafLab/ArchR")
devtools::install_github("GreenleafLab/ArchR")
library(ArchR)
ArchR::installExtraPackages()
addArchRGenome("hg38")
addArchRGenome("hg38")
devtools::install()
usethis::use_github()
devtools::build()
devtools::install()
devtools::install()
devtools::build()
devtools::install()
devtools::build()
devtools::install_local('../OneGene_0.0.1.tar.gz')
install.packages("~/Xiapeng_files/OneGene_0.0.1.tar.gz", repos = NULL, type = "source")
library(OneGene)
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
usethis::edit_r_environ()
usethis::edit_r_environ()
usethis::edit_r_environ()
devtools::install()
ggsci::pal_aaas()
ggsci::pal_aaas()(10)
devtools::install()
usethis::edit_r_environ()
devtools::install()
devtools::install()
devtools::build()
windowsFonts(A = windowsFont("Times New Roman"),
B = windowsFont("Arial"))
Fonts(A = windowsFont("Times New Roman"),
B = windowsFont("Arial"))
theme_get()$text
libar
library(ggplot2)
theme_get()$text
set_font
set_font()
if(! require('yyplot')){install_github("GuangchuangYu/yyplot",ask = F)}
if(! require('yyplot')){devtools::install_github("GuangchuangYu/yyplot",ask = F)}
if(! require('meme')){install.packages("meme",ask = F)}
if(! require('meme')){install.packages("meme",ask = F)}
if(! require('yyplot')){devtools::install_github("GuangchuangYu/yyplot",ask = F)}
if(! require('yyplot')){devtools::install_github("GuangchuangYu/yyplot",ask = F,suppressUpdates = T)}
if(! require('meme')){install.packages("meme",ask = F,suppressUpdates = T)}
if(! require('yyplot')){devtools::install_github("GuangchuangYu/yyplot",ask = F,suppressUpdates = T)}
if(! require('aplot')){remotes::install_github("YuLab-SMU/aplot",ask = F,suppressUpdates = T)}
if(! require('viridis')){install.packages("viridis",ask = F,suppressUpdates = T)}
set_font(p, family="Arial", fontface="italic")
set_font(family="Arial", fontface="italic")
devtools::build()
devtools::install()
devtools::build()
install.packages("~/Xiapeng_files/OneGene_0.0.1.tar.gz", repos = NULL, type = "source")
?geom_signif()
devtools::build()
devtools::install()
library(OneGene)
save_path <- './'
paste0(save_path,'CellChat_res.Rdata')
save_path <- './data/'
paste0(save_path,'CellChat_res.Rdata')
name <- 'CellChat.Rdata'
path <- './'
paste0(path,name)
path_to_save <- paste0(path,name)
path_to_save
name <- 'CellChat_res.Rdata'
path_to_save <- paste0(path,name)
path_to_save
run_scRNA_CellChat <- function(scRNA,idents ='celltype',save_path = NULL,save_name=NULL) {
if(! require('CellChat')){devtools::install_github("sqjin/CellChat",ask = F,suppressUpdates = T)}
if(! require('tidyverse')){install.packages("tidyverse",ask = F,suppressUpdates = T)}
scRNA_chat <- scRNA
Idents(scRNA_chat) <- idents
meta =scRNA_chat@meta.data
data_input <- as.matrix(scRNA_chat@assays$RNA@data)
message(identical(colnames(data_input),rownames(meta)))
message("==> Start Create CellChat Object!")
cellchat <- createCellChat(object = data_input, meta = meta, group.by = "celltype")
CellChatDB <- CellChatDB.human
groupSize <- as.numeric(table(cellchat@idents))
CellChatDB.use <- subsetDB(CellChatDB, search = "Secreted Signaling")
cellchat@DB <- CellChatDB.use
message("==> Start Run CellChat-----Please Wait--------")
dplyr::glimpse(CellChatDB$interaction)##配体-受体分析
# 提取数据库支持的数据子集
cellchat <- subsetData(cellchat)
# 识别过表达基因
cellchat <- identifyOverExpressedGenes(cellchat)
# 识别配体-受体对
cellchat <- identifyOverExpressedInteractions(cellchat)
# 将配体、受体投射到PPI网络
cellchat <- projectData(cellchat, PPI.human)
cellchat <- computeCommunProb(cellchat)
# Filter out the cell-cell communication if there are only few number of cells in certain cell groups
cellchat <- filterCommunication(cellchat, min.cells = 10)
cellchat <- computeCommunProbPathway(cellchat)
df.net<- subsetCommunication(cellchat)
cellchat <- aggregateNet(cellchat)
groupSize <- as.numeric(table(cellchat@idents))
cellchat <- netAnalysis_computeCentrality(cellchat, slot.name = "netP")
message("==> CellChat Done-----Start Save the data--------")
if (is.null(save_path)) {
path <- './'
} else {
path <- save_path
}
if (is.null(save_name)) {
name <- 'CellChat_res.Rdata'
} else {
name <- save_path
}
path_to_save <- paste0(path,name)
save(cellchat,file = path_to_save)
message("==> Success!--------")
}
?projectData
library(CellChat)
?projectData
# 若物种是小鼠则选用CellChatDB.mouse数据库
CellChatDB <- CellChatDB.mouse
# 若物种是小鼠则选用CellChatDB.mouse数据库
message("==>Error--------\n--Only 'CellChatDB.human' and 'CellChatDB.mouse'supported ！")
message("==>------------Error--------\n--Only 'CellChatDB.human' and 'CellChatDB.mouse'supported ！")
message("==>------------Error--------\n
==>------------Only 'CellChatDB.human' and 'CellChatDB.mouse'supported !-----------")
message("==>------------Error--------\n
==>------------Only 'CellChatDB.human' and 'CellChatDB.mouse'supported !")
"==>------------Error--------\n
==> Only 'CellChatDB.human' and 'CellChatDB.mouse'supported !"
"==>------------Error--------\n==> Only 'CellChatDB.human' and 'CellChatDB.mouse'supported !"
message("==>------------Error--------\n
==> Only 'CellChatDB.human' and 'CellChatDB.mouse'supported !")
message("==>------Error--------\n
==> Only 'CellChatDB.human' and 'CellChatDB.mouse'supported !")
message("==>------Error--------\t
==> Only 'CellChatDB.human' and 'CellChatDB.mouse'supported !")
message("==>------\nError\n--------\t
==> Only 'CellChatDB.human' and 'CellChatDB.mouse'supported !")
message("==>------\nError==>------\n--------\t
==> Only 'CellChatDB.human' and 'CellChatDB.mouse'supported !")
message("==>------\nError\n--------\t
==> Only 'CellChatDB.human' and 'CellChatDB.mouse'supported !")
message("------\nError\n--------\t
==> Only 'CellChatDB.human' and 'CellChatDB.mouse'supported !")
message("--------\nError\n--------\t
==> Only 'CellChatDB.human' and 'CellChatDB.mouse'supported !")
message("--------\nError\n--------\t
==> -------Only 'CellChatDB.human' and 'CellChatDB.mouse'supported !")
database[1]
database <- c('CellChatDB.human', 'CellChatDB.mouse')
database[1]
database <- c('CellChatDB.human', 'CellChatDB.mouse')
if (is.null(CellChat_DB)) {
CellChatDB <- CellChatDB.human
} else if (!CellChat_DB %in% database) {
message("--------\nError\n--------\t==> -------Only 'CellChatDB.human' and 'CellChatDB.mouse' supported!")
} else if(CellChat_DB == database[1]){
CellChatDB <- CellChatDB.human
} else if (CellChat_DB == database[2]) {
CellChatDB <- CellChatDB.mouse
}
CellChat_DB = NULL
if (is.null(CellChat_DB)) {
CellChatDB <- CellChatDB.human
} else if (!CellChat_DB %in% database) {
message("--------\nError\n--------\t==> -------Only 'CellChatDB.human' and 'CellChatDB.mouse' supported!")
} else if(CellChat_DB == database[1]){
CellChatDB <- CellChatDB.human
} else if (CellChat_DB == database[2]) {
CellChatDB <- CellChatDB.mouse
}
CellChatDB
devtools::build()
devtools::build()
install.packages("~/Xiapeng_files/OneGene_0.0.1.tar.gz", repos = NULL, type = "source")
devtools::install()
devtools::build()
install.packages("~/Xiapeng_files/OneGene_0.0.2.tar.gz", repos = NULL, type = "source")
